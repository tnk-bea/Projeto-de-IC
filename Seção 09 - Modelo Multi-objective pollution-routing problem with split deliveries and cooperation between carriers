from pulp import *

# Parâmetros e conjuntos simulados (exemplo para iniciar)

n = 3  # número de clientes internos
m = 2  # número de clientes externos
K = 2  # número de veículos
Q = 100  # capacidade máxima do veículo
M = 9999  # valor grande para big-M

clientes_internos = [f"v{i}" for i in range(1, n+1)]
clientes_externos = [f"v{i}" for i in range(n+1, n+m+1)]
nos = ["v0"] + clientes_internos + clientes_externos + [f"v{n+m+1}"]
arestas = [(i, j) for i in nos for j in nos if i != j]
veiculos = list(range(1, K+1))

# Parâmetros fictícios (valores exemplo)
p = {i: 100 for i in clientes_internos + clientes_externos}
alpha = 0.3
c = 2
d = {(i, j): 10 for (i, j) in arestas}
q = {i: 20 for i in clientes_internos + clientes_externos}
rho0 = 1.0
rhostar = 2.0
delta = 2.6

# Modelo

model = LpProblem("MultiObjective_PRP_with_SplitDelivery", LpMaximize)

# Variáveis de decisão
x = LpVariable.dicts("x", ((i, j, k) for (i, j) in arestas for k in veiculos), cat=LpBinary)
y = LpVariable.dicts("y", (i for i in clientes_internos + clientes_externos), cat=LpBinary)
z = LpVariable.dicts("z", ((i, k) for i in clientes_internos + clientes_externos for k in veiculos), lowBound=0)
l = LpVariable.dicts("l", ((i, j, k) for (i, j) in arestas for k in veiculos), lowBound=0)


# Funções Objetivo

# Lucro líquido (Maximizar)
f1 = lpSum(
    p[i] * (1 - y[i]) for i in clientes_internos
) + lpSum(
    alpha * p[i] * (1 - y[i]) for i in clientes_externos
) + lpSum(
    (1 - alpha) * p[i] * y[i] for i in clientes_internos
) - lpSum(
    c * d[i, j] * x[i, j, k] for (i, j) in arestas for k in veiculos
)

# Emissões (Minimizar)
f2 = lpSum(
    (rho0 * x[i, j, k] + ((rhostar - rho0) / Q) * l[i, j, k]) * d[i, j] * delta
    for (i, j) in arestas for k in veiculos
)


# Restrições

# (1) Conservação de fluxo
for i in nos:
    for k in veiculos:
        model += lpSum(x[h, i, k] for h in nos if h != i) == lpSum(x[i, j, k] for j in nos if j != i)

# (2) Atendimento por roteamento ou cooperação
for i in clientes_internos + clientes_externos:
    model += lpSum(x[i, j, k] for j in nos for k in veiculos if j != i) >= 1 - y[i]
    model += lpSum(x[i, j, k] for j in nos for k in veiculos if j != i) <= M * (1 - y[i])

# (3) Limite de capacidade por veículo
for k in veiculos:
    model += lpSum(z[i, k] for i in clientes_internos + clientes_externos) <= Q

# (4) Balanceamento de carga
for i in nos:
    for k in veiculos:
        model += lpSum(l[h, i, k] for h in nos if h != i) - lpSum(l[i, j, k] for j in nos if j != i) == lpSum(z[i, k] for k_ in veiculos if i in z and k == k_)

# (5) Atendimento completo à demanda
for i in clientes_internos + clientes_externos:
    model += lpSum(z[i, k] for k in veiculos) == q[i] * (1 - y[i])

# (6) e (7) Restrições operacionais de carga
for (i, j) in arestas:
    for k in veiculos:
        if i in clientes_internos + clientes_externos and j in clientes_internos + clientes_externos:
            model += z[j, k] <= l[i, j, k]
            model += l[i, j, k] <= Q - z[i, k]

# (8) Repetida — limite de capacidade
for k in veiculos:
    model += lpSum(z[i, k] for i in clientes_internos + clientes_externos) <= Q


# Função objetivo (modelo genérico: usar só f1 ou f2 conforme método multiobjetivo)
# Aqui apenas um exemplo: lucro líquido como objetivo principal
model.setObjective(f1)


# Execução
# model.solve()
# print("Status:", LpStatus[model.status])
# print("Lucro líquido:", value(f1))
# print("Emissão total:", value(f2))

